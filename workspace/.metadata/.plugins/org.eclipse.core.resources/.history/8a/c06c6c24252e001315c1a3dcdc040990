package com.watterso.position;

import java.util.Arrays;
import java.util.HashMap;

import android.app.IntentService;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiManager;
import android.os.Binder;
import android.os.IBinder;

public class DataIntentService extends IntentService implements SensorEventListener {
	private final IBinder mBinder = new DataBinder();
	private Intent mReceivedIntent;
	private boolean ScanAsFastAsPossible = false;
	// Sensors
	private SensorManager mSensorManager;
	private Sensor mLinearAcceleration;
	private Sensor mAccelerometer;
	private Sensor mMagneticField;
	// Stored Sensor Vals
	private float[] mGravity;
	private float[] mGeoMagnetic;
	private float[] mLinearAcc;
	private HashMap<Long, Float[]> mVData;
	private HashMap<Long, HashMap<String, Integer>> mWData;

	public DataIntentService(String name) {
		super(name);
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		mSensorManager.unregisterListener(this);
	}

	@Override
	public IBinder onBind(Intent intent) {
		mReceivedIntent = intent;
		return mBinder;
	}

	public class DataBinder extends Binder {
		public DataIntentService getService() {
			return DataIntentService.this;
		}
	}

	// NAIVE ROTATION ASSUMES CORRECT USAGE OF 3D VECTOR
	public static Float[] rotateVector(float[] v, float[] r) {
		Float[] oot = new Float[3];
		for (int i = 0; i < oot.length; i++) {
			oot[i] = r[3 * i] * v[0] + r[3 * i + 1] * v[1] + r[3 * i + 2]
					* v[2];
		}
		return oot;
	}
	
	@Override
	public void onSensorChanged(SensorEvent event) {
		switch (event.sensor.getType()) {
		case Sensor.TYPE_ACCELEROMETER:
			mGravity = Arrays.copyOf(event.values, 3);
			break;
		case Sensor.TYPE_MAGNETIC_FIELD:
			mGeoMagnetic = Arrays.copyOf(event.values, 3);
			break;
		case Sensor.TYPE_LINEAR_ACCELERATION:
			mLinearAcc = Arrays.copyOf(event.values, 3);
			break;
		}
		float[] rotation = new float[9];
		if (SensorManager.getRotationMatrix(rotation, null, mGravity,
				mGeoMagnetic)) {
			// filter small changes
			if (Math.abs(mLinearAcc[0]) > .1 || Math.abs(mLinearAcc[1]) > .1
					|| Math.abs(mLinearAcc[2]) > .1) {
				Float[] rotatedAcc = new Float[3];
				rotatedAcc = rotateVector(mLinearAcc, rotation);
				mVData.put(event.timestamp, rotatedAcc);
				// Log.d("ROTATE", Arrays.toString(rotation));
				// Log.d("LINEAR", Arrays.toString(mLinearAcc));
				// Log.d("YOLO",
				// ""+rotatedAcc[2]);//Arrays.toString(rotatedAcc));
			}
		}
	}

	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {
	}

	@Override
	protected void onHandleIntent(Intent intent) {
		// TODO Auto-generated method stub
		
	}
}
