package com.watterso.position;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.HashMap;

import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;

public class MainActivity extends Activity implements SensorEventListener {
	// Sensors
	private SensorManager mSensorManager;
	private Sensor mLinearAcceleration;
	private Sensor mAccelerometer;
	private Sensor mMagneticField;
	// Stored Sensor Vals
	private float[] mGravity;
	private float[] mGeoMagnetic;
	private float[] mLinearAcc;
	private HashMap<Long, Float[]> mData;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
		mLinearAcceleration = mSensorManager
				.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION);
		mAccelerometer = mSensorManager
				.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
		mMagneticField = mSensorManager
				.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);

		mGravity = new float[3];
		mGeoMagnetic = new float[3];
		mLinearAcc = new float[3];
		mData = new HashMap<Long, Float[]>();
		Button post = (Button)findViewById(R.id.postButton);
		post.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				postData();
			}
		});
	}

	@Override
	protected void onResume() {
		super.onResume();
		mSensorManager.registerListener(this, mLinearAcceleration,
				SensorManager.SENSOR_DELAY_NORMAL);
		mSensorManager.registerListener(this, mAccelerometer,
				SensorManager.SENSOR_DELAY_NORMAL);
		mSensorManager.registerListener(this, mMagneticField,
				SensorManager.SENSOR_DELAY_NORMAL);
	}

	@Override
	protected void onPause() {
		super.onPause();
		mSensorManager.unregisterListener(this);
		
	}
	
	@Override
	protected void onStop() {
		super.onStop();
		
	}

	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onSensorChanged(SensorEvent event) {
		switch (event.sensor.getType()) {
		case Sensor.TYPE_ACCELEROMETER:
			mGravity = Arrays.copyOf(event.values, 3);
			break;
		case Sensor.TYPE_MAGNETIC_FIELD:
			mGeoMagnetic = Arrays.copyOf(event.values, 3);
			break;
		case Sensor.TYPE_LINEAR_ACCELERATION:
			mLinearAcc = Arrays.copyOf(event.values, 3);
			break;
		}
		float[] rotation = new float[9];
		if (SensorManager.getRotationMatrix(rotation, null, mGravity,
				mGeoMagnetic)) {
			// filter small changes
			if (Math.abs(mLinearAcc[0]) > .1 || Math.abs(mLinearAcc[1]) > .1
					|| Math.abs(mLinearAcc[2]) > .1) {
				Float[] rotatedAcc = new Float[3];
				rotatedAcc = rotateVector(mLinearAcc, rotation);
				mData.put(event.timestamp, rotatedAcc);
				// Log.d("ROTATE", Arrays.toString(rotation));
				// Log.d("LINEAR", Arrays.toString(mLinearAcc));
				//	Log.d("YOLO", ""+rotatedAcc[2]);//Arrays.toString(rotatedAcc));
			}
		}
	}
	private void postData(){
		new PostDataTask().execute();
	}
	// NAIVE ROTATION ASSUMES CORRECT USAGE OF 3D VECTOR
	public static Float[] rotateVector(float[] v, float[] r) {
		Float[] oot = new Float[3];
		for (int i = 0; i < oot.length; i++) {
			oot[i] = r[3 * i] * v[0] + r[3 * i + 1] * v[1] + r[3 * i + 2]
					* v[2];
		}
		return oot;
	}
	
	public static JSONObject getJsonFromMap(HashMap<Long,Float[]> in){
		JSONObject oot = new JSONObject();
		for(Long l : in.keySet()){
			try {
				oot.put(""+l, in.get(l));
			} catch (JSONException e) {
				Log.d("YOLOJSON", e.getMessage());
			}
		}
		return oot;
	}
	private class PostDataTask extends AsyncTask<HashMap<Long,Float []>,Void,Void>{

		@Override
		protected Void doInBackground(HashMap<Long,Float []>... params) {
			JSONObject json = getJsonFromMap(params);
			String path = "https://posttestserver.com/post.php";
			HttpPost lePost = new HttpPost(path);
			try {
				lePost.setEntity(new StringEntity(json.toString()));
			} catch (UnsupportedEncodingException e) {
				Log.d("YOLOENC", e.getMessage());
			}
			lePost.setHeader("Accept", "application/json");
		    lePost.setHeader("Content-type", "application/json");
		    DefaultHttpClient httpclient = new DefaultHttpClient();
		    ResponseHandler responseHandler = new BasicResponseHandler();
		    try {
				httpclient.execute(lePost, responseHandler);
			} catch (ClientProtocolException e) {
				Log.d("YOLOPROTO", e.getMessage());
			} catch (IOException e) {
				Log.d("YOLOIO", e.getMessage());
			}
		    Log.d("INFO", "POSTED");
			mData.clear();
			return null;
		}
	}
}
